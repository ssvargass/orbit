<?php

/**
 * Implements hook_menu().
 */
function ob_room_menu() {
  $items['admin/config/orbit/room'] = array(
    'title' => 'Room administer',
    'description' => 'Email de administrador de salas',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ob_room_administer_form'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

function ob_room_theme($existing, $type, $theme, $path) {  
  return array(
    'author' => array(
      'template' => 'author',
      'path' => $path . '/templates',
      'variables' => array(
        'node' => NULL,
      ),
    ),
    'invitado' => array(
      'template' => 'invitado',
      'path' => $path . '/templates',
      'variables' => array(
        'node' => NULL,
      ),
    ),
    'room_create' => array(
      'template' => 'room_create',
      'path' => $path . '/templates',
      'variables' => array(
        'node' => NULL,
      ),
    ),
    'room_administer' => array(
      'template' => 'room_administer',
      'path' => $path . '/templates',
      'variables' => array(
        'node' => NULL,
      ),
    ),
    'room_author' => array(
      'template' => 'room_author',
      'path' => $path . '/templates',
      'variables' => array(
        'node' => NULL,
      ),
    ),
    'room_invitado' => array(
      'template' => 'room_invitado',
      'path' => $path . '/templates',
      'variables' => array(
        'node' => NULL,
      ),
    ),
  );   
}

/**
 * Implements hook_permission().
 */
function ob_room_permission() {
  return array(
    'administrate_room' => array(
      'title' => t('Administrate Room'),
      'description' => t('Administrate room'),
    ),
  );
}

function ob_room_administer_form($form, $form_state){
  $form['ob_room_mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Administrador'),
    '#default_value' => variable_get('ob_room_mail', ''),
    '#description' => t('Email del administrador de salas'),
    '#required' => TRUE,
  );
  return system_settings_form($form);
}

function ob_room_separate($form, &$form_state, $nid){
  $form_state['custom']['nid'] = $nid;
  $form['denegate'] = array(
    '#type' => 'submit',
    '#value' => t('Rechazar'),
    '#ajax' => array(
      'callback' => '_ob_room_callback',
    )
  );
  $form['acept'] = array(
    '#type' => 'submit',
    '#value' => t('Aceptar'),
    '#ajax' => array(
      'callback' => '_ob_room_callback',
    )
  );
  return $form;  
}

function _ob_room_callback($form, $form_state) {
  $commands = array();
  $nid = $form_state['custom']['nid'];
  if($form_state['clicked_button']['#value'] == 'Rechazar'){
    $formulario = drupal_get_form('ob_room_denegate', $nid);
    $commands[] = ajax_command_replace('.view-salas-event', render($formulario));
  } else {
    $node = node_load($nid);
    $node->status = 1;
    node_save($node);
    
    $commands[] = ajax_command_invoke('', 'ob_room_reload');
    
    $creador = $node->uid;
    $creador = user_load($creador);

    if(isset($node->field_invitados['und'])){
      $invitados = $node->field_invitados['und'];
      $inv = array();

      foreach ($invitados as $key => $value) {
        $inv[] = $value['target_id'];
      }

      $node->invitados = user_load_multiple($inv);

      foreach ($node->invitados as $key => $value) {
        $invitado = theme('room_invitado', array(
          'node' => $node, 
        ));
        ob_room_send_mail($value->mail, t('Ha sido invitado a la reunion ') . $node->title, $invitado);
      }
    }

    $author = theme('room_author', array(
      'node' => $node, 
    ));

    ob_room_send_mail($creador->mail, t('La reunion ha sido aceptada ') . $node->title, $author);

    drupal_set_message('Se ha actualizado');
  }
  return array('#type' => 'ajax', '#commands' => $commands);  
}

function ob_room_denegate($form, &$form_state, $nid){
  $form_state['custom']['nid'] = $nid;
  $form['header'] = array(
    '#markup' => t('RESPUESTA'),
  );
  $form['text'] = array(
    '#type' => 'textarea',
    '#title' => t('Su sala no fue agendada por:'),
  );

  $form['responce'] = array(
    '#type' => 'submit',
    '#value' => t('Responder'),
    '#ajax' => array(
      'callback' => '_ob_room_callback_delete',
    )
  );
  return $form;  
}

function _ob_room_callback_delete($form, $form_state) {
  $commands = array();
  $nid = $form_state['custom']['nid'];
  $respuesta = t('Se ha cancelado y notificado la reserva.');
  node_delete($nid);
  $commands[] = ajax_command_replace('#ob-room-denegate', $respuesta);
  return array('#type' => 'ajax', '#commands' => $commands);  
}

function ob_room_node_submit($node, $form, &$form_state){
  if($node->type == 'event'){
    $path = drupal_get_path('module', 'ob_room') . '/send_email.php';
    include($path);

    $creador = $node->uid;
    $creador = user_load($creador);
    $invitados = $node->field_invitados['und'];
    $inv = array();

    foreach ($invitados as $key => $value) {
      $inv[] = $value['target_id'];
    }

    $node->invitados = user_load_multiple($inv);

    foreach ($node->invitados as $key => $value) {
      $invitado = theme('invitado', array(
        'node' => $node, 
      ));
      ob_room_send_mail($value->mail, t('Ha sido invitado al evento ') . $node->title, $invitado);
    }

    /*$author = theme('author', array(
      'node' => $node, 
    ));*/

    sendCalEntry($creador->mail);

  } else if($node->type == 'room_event'){
    $creador = $node->uid;
    $creador = user_load($creador);
    $invitados = $node->field_invitados['und'];
    $inv = array();
    foreach ($invitados as $key => $value) {
      $inv[] = $value['target_id'];
    }

    $node->invitados = user_load_multiple($inv);

    $author = theme('room_create', array(
      'node' => $node, 
    ));

    $node->sala = node_load($node->field_nid['und'][0]['value']);
    
    ob_room_send_mail($creador->mail, t('Ha creado la solicitud ') . $node->title, $author);

    $solicitud = theme('room_administer', array(
      'node' => $node, 
    ));
    
    $administrator = variable_get('ob_room_mail');
    ob_room_send_mail($administrator, t('Ha generado la solicitud ') . $node->title, $solicitud);

  }

}

function ob_room_send_mail($email, $subject, $body){
  $module = 'ob_notifications';
  $key = 'create_event';
  $language = language_default();
  $params = array();
  $from = NULL;
  $send = FALSE;
  $message = drupal_mail($module, $key, $email, $language, $params, $from, $send);
  $message['subject'] = $subject;
  $message['body'] = array();
  $message['body'][] = $body;
  // Retrieve the responsible implementation for this message.
  $system = drupal_mail_system($module, $key);
  // Format the message body.
  $message = $system->format($message);
  // Send e-mail.
  $message['result'] =  $system->mail($message);
}




/** * Implementation of hook_cron_queue_info() */ 
function ob_room_cron_queue_info() { 
  $queues['ob_boletin'] = array(
    'worker callback' => '_ob_boletin', 
    // This is the callback function for each queue item. 
    'time' => 86400, 
    // This is the max run time per cron run in seconds. 
  ); 
  return $queues; 
}
//2014-04-03T14:00:00
/** * Implementation of hook_cron() */
function ob_room_cron() { 
  // Put everything in a queue for processing. 
  $queue = DrupalQueue::get('ob_boletin');

  $result = db_select('users', 'u')
    ->fields('u')
    ->condition('status', 1,'=')
    ->execute();
  
  while($record = $result->fetchAssoc()) {
    $queue->createItem($record);
  }
}

/** * Worker Callback for the runner cron queue. */ 
function _ob_boletin($item) {
  $inicio = date('Y-m-d').'T00:00:00';
  $fin = date('Y-m-d').'T23:59:59';
  $nodeQuery = new EntityFieldQuery();
  $nodes = $nodeQuery->entityCondition('entity_type', 'node')
    //->entityCondition('bundle', 'event')
    ->propertyCondition('status', 1)
    ->propertyCondition('uid', $item['uid'])
    ->fieldCondition('field_fecha', 'value', array($inicio,$fin),'BETWEEN')
    ->execute();

  $eventQuery = new EntityFieldQuery();
  $event = $nodeQuery->entityCondition('entity_type', 'node')
    //->entityCondition('bundle', 'event')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_fecha', 'value', array($inicio,$fin),'BETWEEN')
    ->fieldCondition('field_invitados', 'target_id', $item['uid'], '=')
    ->execute();


  if(count($nodes) > 0 || count($event) > 0){
    $output = 'A continuaciÃ³n se listan los eventos del dia de hoy<br>';
    if(count($nodes) > 0){
      foreach ($nodes['node'] as $key => $value) {
        $node = node_load($value->nid);
        $output .= '<br>'.$node->title.':'.$node->field_fecha['und'][0]['value'] . ' - ' . $node->field_fecha['und'][0]['value2'];
      }
    }

    if(count($event) > 0){
      foreach ($event['node'] as $key => $value) {
        $node = node_load($value->nid);
        $output .= '<br>'.$node->title.':'.$node->field_fecha['und'][0]['value'] . ' - ' . $node->field_fecha['und'][0]['value2'];
      }
    }
    ob_room_send_mail($item['mail'], 'Eventos del dia ' . date('Y-m-d'), $output);
  } 
}

?>