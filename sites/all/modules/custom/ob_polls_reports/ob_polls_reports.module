<?php
/**
 * @file
 * Polls reports functionality.
 */

/**
 * Implements hook_menu()
 */
function ob_polls_reports_menu() {
  $menu['polls-report'] = array(
    'title' => 'Polls results export',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ob_polls_reports_form'),
    // 'access callback' => '_advpoll_results_access',
    'access arguments' => array('export polls reports'),
    'type' => MENU_CALLBACK,
    'file' => 'ob_polls_reports.pages.inc',
  );
  $menu['poll/%node/results'] = array(
    'title' => 'Results',
    'page callback' => 'ob_polls_reports_results_page',
    'page arguments' => array(1),
    'access arguments' => array('export polls reports'),
    'type' => MENU_CALLBACK,
    'file' => 'ob_polls_reports.pages.inc',
  );
  $menu['poll/%node/results.pdf'] = array(
    'title' => 'Results pdf',
    'page callback' => 'ob_polls_reports_results_page_pdf',
    'page arguments' => array(1),
    'access arguments' => array('export polls reports'),
    'type' => MENU_CALLBACK,
    'file' => 'ob_polls_reports.pages.inc',
  );
  $menu['poll/%node/results.xls'] = array(
    'title' => 'Results excel',
    'page callback' => 'ob_polls_reports_results_page_xls',
    'page arguments' => array(1),
    'access arguments' => array('export polls reports'),
    'type' => MENU_CALLBACK,
    'file' => 'ob_polls_reports.pages.inc',
  );
  return $menu;
}

/**
 * Implements hook_node_view_alter()
 */
function ob_polls_reports_node_view_alter(&$build) {
  if ($build['#bundle'] == 'advpoll') {
    $node = $build['#node'];
    $data = advpoll_get_data($node);
    if ($data->behavior == 'approval' || $data->behavior == 'pool') {
      drupal_add_css(drupal_get_path('module', 'advpoll') . '/css/advpoll.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
// replace the markup for choices with appropriate markup.
      unset($build['advpoll_choice']);
// check for eligibility to vote
      if (advpoll_user_eligibility($node)) {
// print out voting form
        $voteform = drupal_get_form('advpoll_choice_form', $node);
        $build['advpoll_choice'] = array(0 => $voteform, '#weight' => 1);
      } else {
// get user's votes if they're logged in and if voting is normal
        $votes = array();
        if ($data->mode == 'normal') {
          $votes = advpoll_get_user_votes($node->nid);
        }

        $results = ob_polls_reports_group_others_results($node->nid, $data);
        $build['advpoll_choice'] = array('#markup' => $results, '#weight' => 1);
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function ob_polls_reports_permission() {
  return array(
    'export polls reports' => array(
      'title' => t('Export polls reports'),
      'description' => t('Export polls reports'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ob_polls_reports_form_advpoll_choice_form_alter(&$form, &$form_state, $form_id){
  $node = $form_state['build_info']['args'][0];
  $field_opinion_question = field_get_items('node', $node, 'field_opinion_question');
  $form['submit']['#ajax']['callback'] = 'ob_polls_reports_form_submit';
  if ($field_opinion_question) {
    $question = $field_opinion_question[0]['value'];
    $form['opinion_question'] = array(
      '#title' => $question,
      '#type' => 'textarea',
    );
    $form['submit']['#weight'] = 10;

    $form['#submit'][] = 'ob_polls_reports_opinion_question_submit';
  }
}

/**
 * Opinion question submit
 */
function ob_polls_reports_opinion_question_submit($form, &$form_state) {
  $answer = $form_state['values']['opinion_question'];
  if ($answer) {
    $choice = '';
    foreach ($form_state['values'] as $key => $value) {
      if (is_numeric($key)) {
        $choice = $value;
      }
    }
    global $user;
    $uid = $user->uid;
    $nid = $form_state['build_info']['args'][0]->nid;
    $record = array(
      'nid' => $nid,
      'uid' => $uid,
      'answer' => $answer,
      'choice' => $choice,
    );
    drupal_write_record('users_polls_opinion_answers', $record);
  }
}

/**
 * Implements hook_views_api().
 */
function ob_polls_reports_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ob_polls_reports') . '/views',
  );
}

/*
 * Determine how to theme poll results write in group 
 */

function ob_polls_reports_group_others_results($nid, $data, $page = 0) {

  $output = '';
  $form = NULL;
  $expired = FALSE;

  if ($data->state == 'close') {
    $expired = TRUE;
  }
  
  if ($data->start_date && $data->start_date > time() || $data->end_date && $data->end_date < time()) {
    $expired = TRUE;
  }

// get user's votes if they're logged in and if voting is normal
  $votes = array();
  if ($data->mode == 'normal') {
    $votes = advpoll_get_user_votes($nid);
  }

  if (user_access('cancel own vote') && $votes && !$expired) {
    $form = drupal_get_form('advpoll_cancel_vote_form', $nid);
  }
  $rendered_form = drupal_render($form);


  if (!$page && $expired && $data->show_results == 'never') {
    $output .= theme('advpoll_closed', array('data' => $data));
  } elseif (!$page && !$votes && $data->electoral && ($data->show_results == 'afterclose'
    || $data->show_results == 'never' ) && !$expired) {
    $output .= theme('advpoll_ineligible', array('data' => $data));
  } elseif (!$page && ($data->show_results == 'never'
    || ($data->show_results == 'afterclose' && !$expired))) {
    $output .= theme('advpoll_noresults', array(
      'data' => $data,
      'votes' => $votes,
      'nid' => $nid,
      'cancel_form' => $rendered_form,
      )
    );
  } else {
    $results = advpoll_get_votes($nid, $data->behavior);
    $bars = '';
    $final = advpoll_update_choices($data->choices, $results['choices']);

    $final['others']['title'] = t('Others');
    $final['others']['percentage'] = 0;
    $final['others']['votes'] = 0;
    $final['others']['write_in'] = 0;
    $final['others']['tag'] = 'others';
    foreach ($final as $key => $item) {
      if ($item['write_in']) {
        $final['others']['percentage'] += $item['percentage'];
        $final['others']['votes'] += $item['votes'];
        unset($final[$key]);
      }
    }

//TODO - update title to indicate that the source of a vote is a write in
//       Allow permission to determine whether or not to display a write in vote in results.
    foreach ($final as $item) {
      $voted = FALSE;

      if (in_array($item['tag'], $votes)) {
        $voted = TRUE;
      }
      $title = $item['title'];

      $show_bar = TRUE;
      if ($item['write_in']) {
        $title .= ' ' . t('(Write in)');

        $show_bar = _advpoll_show_writeins_access();
      }

      if ($show_bar) {
        $bars .= theme('advpoll_bar', array(
          'title' => $title,
          'percentage' => $item['percentage'],
          'votes' => $item['votes'],
          'voted' => $voted,
          )
        );
      }
    }

    $output .= theme('advpoll_results', array(
      'bars' => $bars,
      'total' => $results['total'],
      'voted' => $votes,
      'nid' => $nid,
      'cancel_form' => $rendered_form,
      )
    );
  }

  return $output;
}

/**
 * Submit handler for voting
 */
function ob_polls_reports_form_submit($form, &$form_state) {
  $data = advpoll_get_form_data($form_state);
  $count = count($data->choices);
  $votes = $form[$count]['#value'];
  $nid = $form_state['build_info']['args'][0]->nid;
  $writein = '';

  $message = advpoll_form_submit_check($data, $nid);

  if ($message) {
    $form['message'] = array(
      '#type' => 'markup',
      '#prefix' => '<div id="message">',
      '#suffix' => '</div>',
      '#markup' => $message,
    );
    return $form;
  }

// check to see if a write-in exists and was filled in.
  if ($data->write_in) {

    if (isset($form_state['values']['write_in'])) {
      $writein = trim($form_state['values']['write_in']);

// Sanitize and check to see if there's a valid write in afterward.
// There is no reason for a user to be allowed to use html tags.
      $writein = filter_xss($writein);
      $writein = check_plain($writein);

      if ($writein) {
        $data->choices[] = advpoll_process_writein($nid, $writein, $data);
      } else {
        $form['message'] = array(
          '#type' => 'markup',
          '#prefix' => '<div id="message">',
          '#suffix' => '</div>',
          '#markup' => t('Please type in a valid write-in choice or select a different option.'),
        );
        return $form;
      }
    }
  }

// data structure returned from form is based upon whether it was a radios
// or checkbox element
  if ($data->max_choices > 1) {
    if ($writein) {
      unset($votes['write-in']);
      $votes[$writein] = $writein;
    }
    $selected = advpoll_checkbox_selected($data->choices, $votes);
  } else {
    if ($writein) {
      $votes = $writein;
    }
    $selected = advpoll_radio_selected($data->choices, $votes);
  }

  if (count($selected) > 0 && count($selected) <= $data->max_choices) {
    foreach ($selected as $item) {
      $vote = array();
      $vote['type'] = 'advpoll';
      $vote['tag'] = $item;
      $vote['nid'] = $nid;
      $vote['value'] = 1;
      $vote['mode'] = $data->mode;
      $vote['duration'] = $data->cookie_duration;
      advpoll_add_votes($vote);
    }

    $element['#markup'] = ob_polls_reports_group_others_results($nid, $data);
    return $element;
  } else {
    $form['message'] = array(
      '#type' => 'markup',
      '#prefix' => '<div id="message">',
      '#suffix' => '</div>',
      '#markup' => t('Select up to @quantity @votes.', array(
        '@quantity' => $data->max_choices,
        '@votes' => format_plural($data->max_choices, 'vote', 'votes')
        )
      ),
    );
    return $form;
  }
}